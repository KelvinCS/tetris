/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {

eval("var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nfunction htmlToElement(html) {\n    var template = document.createElement(\"template\");\n    template.innerHTML = html.trim();\n    return template.content.firstChild;\n}\nvar padArrayWithZeros = function (arr, atStart) {\n    var zeros = new Array(4 - arr.length)\n        .fill({ value: 0 });\n    return atStart ? zeros.concat(arr) : arr.concat(zeros);\n};\nvar Game2048 = /** @class */ (function () {\n    function Game2048(containerId) {\n        this.chanceToHaveAFour = 0.25;\n        this.gameContainer = document.getElementById(containerId);\n        this.createInitialGameState();\n    }\n    Game2048.prototype.createInitialGameState = function () {\n        this.gameState = [\n            [{ value: 0 }, { value: 0 }, { value: 0 }, { value: 0 }],\n            [{ value: 0 }, { value: 0 }, { value: 0 }, { value: 0 }],\n            [{ value: 0 }, { value: 0 }, { value: 0 }, { value: 0 }],\n            [{ value: 0 }, { value: 0 }, { value: 0 }, { value: 0 }],\n        ];\n        // Create two random blocks\n        this.createRandomBlock(2);\n        this.createRandomBlock(2);\n    };\n    Game2048.prototype.getEmptyCells = function () {\n        return this.gameState.reduce(function (empty, xList, y) {\n            xList.forEach(function (_a, x) {\n                var value = _a.value;\n                if (!value)\n                    empty.push({ x: x, y: y });\n            });\n            return empty;\n        }, []);\n    };\n    Game2048.prototype.resolveGameRow = function (row, reverse) {\n        var orderedRow = reverse ? __spreadArray([], row, true).reverse() : row;\n        var prevCell;\n        var reducedRow = orderedRow.reduce(function (newRow, cell, x) {\n            var isLastCell = x === 3;\n            var canMergeWithPrevCell = (prevCell === null || prevCell === void 0 ? void 0 : prevCell.value) === cell.value;\n            if (canMergeWithPrevCell) {\n                newRow.push(__assign(__assign({}, cell), { value: cell.value * 2 }));\n                prevCell = undefined;\n            }\n            else if (cell.value && !isLastCell) {\n                if (prevCell === null || prevCell === void 0 ? void 0 : prevCell.value)\n                    newRow.push(prevCell);\n                prevCell = cell;\n            }\n            else if (isLastCell) {\n                if (prevCell === null || prevCell === void 0 ? void 0 : prevCell.value)\n                    newRow.push(prevCell);\n                if (cell.value)\n                    newRow.push(cell);\n            }\n            return newRow;\n        }, []);\n        return padArrayWithZeros(reverse ? reducedRow.reverse() : reducedRow, reverse);\n    };\n    Game2048.prototype.createRandomBlock = function (value) {\n        var emptyCells = this.getEmptyCells();\n        if (!emptyCells)\n            return;\n        var _a = emptyCells[Math.round(Math.random() * (emptyCells.length - 1))], x = _a.x, y = _a.y;\n        var cell = {\n            value: value || (Math.random() <= this.chanceToHaveAFour ? 4 : 2),\n            id: Math.random().toString().slice(2)\n        };\n        this.gameState[y][x] = cell;\n        this.createCellNode(cell, { x: x, y: y });\n    };\n    Game2048.prototype.getColumn = function (x) {\n        return [\n            this.gameState[0][x],\n            this.gameState[1][x],\n            this.gameState[2][x],\n            this.gameState[3][x],\n        ];\n    };\n    Game2048.prototype.moveDown = function () {\n        var _this = this;\n        var _loop_1 = function (x) {\n            var column = this_1.resolveGameRow(this_1.getColumn(Number(x)), true);\n            column.forEach(function (cell, y) {\n                _this.gameState[y][x] = cell;\n            });\n        };\n        var this_1 = this;\n        for (var x in this.gameState) {\n            _loop_1(x);\n        }\n    };\n    Game2048.prototype.moveUp = function () {\n        var _this = this;\n        var _loop_2 = function (x) {\n            var column = this_2.resolveGameRow(this_2.getColumn(Number(x)), false);\n            column.forEach(function (cell, y) {\n                _this.gameState[y][x] = cell;\n            });\n        };\n        var this_2 = this;\n        for (var x in this.gameState) {\n            _loop_2(x);\n        }\n    };\n    Game2048.prototype.moveRight = function () {\n        var _this = this;\n        this.gameState = this.gameState.map(function (xList) { return _this.resolveGameRow(xList, true); });\n    };\n    Game2048.prototype.getCellTransformPosition = function (_a) {\n        var x = _a.x, y = _a.y;\n        return \"translateX(calc(600px * \".concat(x * 0.25, \")) translateY(calc(600px * \").concat(y * 0.25, \"))\");\n    };\n    Game2048.prototype.createCellNode = function (cell, _a) {\n        var x = _a.x, y = _a.y;\n        var htmlElement = \"\\n    <div \\n        class=\\\"block-container\\\" id=\\\"\".concat(cell.id, \"\\\" \\n        style=\\\"transform: \").concat(this.getCellTransformPosition({ x: x, y: y }), \"\\\"\\n    >\\n        <div class=\\\"block block--\").concat(cell.value, \"\\\">\\n            \").concat(cell.value, \"\\n        </div>\\n    </div>\\n    \");\n        var blockNode = htmlToElement(htmlElement);\n        this.gameContainer.appendChild(blockNode);\n    };\n    Game2048.prototype.removeDeadBlocks = function () {\n        var _this = this;\n        this.gameContainer.childNodes.forEach(function (node) {\n            var exists = _this.gameState.find(function (xList) {\n                return xList.find(function (_a) {\n                    var id = _a.id;\n                    return id === node.id;\n                });\n            });\n            if (!exists)\n                node.remove();\n        });\n    };\n    Game2048.prototype.moveLeft = function () {\n        var _this = this;\n        this.gameState = this.gameState.map(function (xList) { return _this.resolveGameRow(xList); });\n    };\n    Game2048.prototype.moveCellNodes = function () {\n        var _this = this;\n        this.gameState.forEach(function (xList, y) {\n            xList.forEach(function (_a, x) {\n                var id = _a.id, value = _a.value;\n                if (!id)\n                    return;\n                var cellNode = document.getElementById(id);\n                cellNode.style.transform = _this.getCellTransformPosition({ x: x, y: y });\n                cellNode.innerHTML = \"\";\n                cellNode.appendChild(htmlToElement(\"\\n          <div class=\\\"block block--\".concat(value, \"\\\">\\n              \").concat(value, \"\\n          </div>\\n        \")));\n            });\n        });\n    };\n    Game2048.prototype.start = function () {\n        var _this = this;\n        var handlers = {\n            ArrowUp: function () { return game.moveUp(); },\n            ArrowDown: function () { return game.moveDown(); },\n            ArrowRight: function () { return game.moveRight(); },\n            ArrowLeft: function () { return game.moveLeft(); },\n        };\n        window.addEventListener(\"keydown\", function (_a) {\n            var code = _a.code;\n            if (!handlers[code])\n                return;\n            handlers[code]();\n            _this.moveCellNodes();\n            _this.createRandomBlock();\n            _this.removeDeadBlocks();\n        });\n    };\n    return Game2048;\n}());\nvar game = new Game2048(\"game\");\ngame.start();\n\n\n//# sourceURL=webpack://2042/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;